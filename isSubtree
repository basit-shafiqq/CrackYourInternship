 public boolean isSubtree(TreeNode root, TreeNode subRoot) {
        if (root == null) {
            return false; // If the main tree is empty, there can't be a subtree.
        }
        if (isSameTree(root, subRoot)) {
            return true; // Check if the trees are identical starting from the current node.
        }
        // Recursively check the left and right subtrees.
        return isSubtree(root.left, subRoot) || isSubtree(root.right, subRoot);
    }

    private boolean isSameTree(TreeNode s, TreeNode t) {
        if (s == null && t == null) {
            return true; // Both trees are empty.
        }
        if (s == null || t == null) {
            return false; // One tree is empty and the other is not.
        }
        if (s.val != t.val) {
            return false; // The values of the current nodes are different.
        }
        // Recursively check the left and right subtrees.
        return isSameTree(s.left, t.left) && isSameTree(s.right, t.right);
    }
