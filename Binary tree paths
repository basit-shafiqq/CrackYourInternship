/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
     public List<String> binaryTreePaths(TreeNode root) {
        List<String> ans = new ArrayList<>();
        solve(root, ans, new StringBuilder());
        return ans;
    }

    void solve(TreeNode root, List<String> ans, StringBuilder path) {
        if (root == null) return;
        
        int len = path.length();
        if (len != 0) path.append("->");
        path.append(root.val);

        if (root.left == null && root.right == null) {
            // If leaf node, add path to result
            ans.add(path.toString());
        } else {
            solve(root.left, ans, path);
            solve(root.right, ans, path);
        }

        // Backtrack
        path.setLength(len);
    }
}
