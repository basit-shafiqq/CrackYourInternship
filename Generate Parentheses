class Solution {
    public List<String> generateParenthesis(int n) {
        
        List<String>ans = new ArrayList<>();
  
        backtrack(n,0,0,new StringBuilder(),ans);
        return ans;
    }

    public void backtrack(int n,int openCount,int closeCount,StringBuilder current,List<String>ans){

        if(current.length()==2*n){
            ans.add(current.toString());
            return;
        }

        if(openCount<n){
            current.append('(');
            backtrack(n,openCount+1,closeCount,current,ans);
            current.deleteCharAt(current.length()-1);
        }

        if(closeCount<openCount){
            current.append(')');
            backtrack(n,openCount,closeCount+1,current,ans);
            current.deleteCharAt(current.length()-1);
        }
    }
}
