private static class SubTreeInfo {
        int sum;
        int size;
        boolean isBST;
        int min;
        int max;

        SubTreeInfo(int sum, boolean isBST, int min, int max,int size) {
            this.sum = sum;
            this.isBST = isBST;
            this.min = min;
            this.max = max;
            this.size = size;
            
        }
    }
    private int maxSumBST = 0;
    int maxsize = 0;
    
    // Return the size of the largest sub-tree which is also a BST
    static int largestBst(Node root)
    {
        // Write your code here
         solve(root);
        return maxsize;
        
    }
    
     private static SubTreeInfo solve(TreeNode root) {
        if (root == null) {
            return new SubTreeInfo(0, true, Integer.MAX_VALUE, Integer.MIN_VALUE,0);
        }

        SubTreeInfo left = solve(root.left);
        SubTreeInfo right = solve(root.right);

        if (left.isBST && right.isBST && root.val > left.max && root.val < right.min) {
            int sum = left.sum + right.sum + root.val;
            int size = left.size+right.
            maxSumBST = Math.max(maxSumBST, sum);
            int min = Math.min(root.val, left.min);
            int max = Math.max(root.val, right.max);

            return new SubTreeInfo(sum, true, min, max,size);
        } else {
            return new SubTreeInfo(Math.max(left.sum, right.sum), false, 0, 0,0);
        }
    }
