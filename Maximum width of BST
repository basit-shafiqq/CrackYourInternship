/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    //custome pair
    class Pair{
        int index;
        TreeNode node;

        Pair(TreeNode node,int index){
            this.node = node;
            this.index = index;
        }
    }
    public int widthOfBinaryTree(TreeNode root) {
        
        if(root==null){
            return 0;
        }

        Queue<Pair>q = new LinkedList<>();
        int ans = 0;
        q.offer(new Pair(root,0));

        while(!q.isEmpty()){

            int size = q.size();
            int min = q.peek().index;
            int first = 0;
            int last = 0;

            for(int i=0;i<size;i++){

                Pair pair = q.poll();
                int curr = pair.index-min;
                TreeNode node = pair.node;
                
                if(i==0){
                    first = curr;
                }
                if(i==size-1){
                    last = curr;
                }
                if(node.left!=null){
                    q.offer(new Pair(node.left,curr*2+1));
                }
                if(node.right!=null){
                    q.offer(new Pair(node.right,curr*2+2));
                }
            }

            ans = Math.max(ans,last-first+1);
        }

        return ans;

    }

    
}
